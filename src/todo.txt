General
  - add routines for displaying/printing the different datatypes

  - promotion rules: Circles, Lines, Bounds, Triangles, ...
     - have left them for the moment, as don't often do binary
       operations on these, but will need it for transformations (maybe)
       and maybe for constructing arrays of these things

point.jl

line.jl
  Haven't really implemented much of "Ray" yet 
  Conversions between Line, Ray and Segment
  Intersections between mixed Line, Ray and Segment
  Arrays of lines, rays and segments???
  Many of the constructors for a "Line" push them towards being Float64
     which will then have an impact on later algorithms
     -- could have specialised algorithms to deal with Rationals (say)
  isin for Ray and Segment

triangle.jl
  intersections and unions -- by converting into a polygon
     (NB: triangles aren't polygons(type) because don't store 4 points
          cause its a waste)

circle.jl (center, radius)
  arc (part of a circle)

transforms.jl
  scale
  translate
  rotate
  shear
  ???

polygons.jl
   constructors
   union/intersection

utilities.jl
   convex hulls
   triangulations
   distance functions (calculate distances between two objects, and
                       closest points)   

plot.jl
   conditionally include PyPlot and create routines for plotting all
   of the above, maybe in with their files, or maybe together?
      -- how to plot unbounded?

   at the moment in utilities.jl

   create
       P = displayPath(O)
   for all objects for basic plot

   perhaps create my own fill routines though

   replace add-hoc "bounds" with a Bounds object


other issues

   -- is there really a point to having separate types for "Point" and
      "Vect"?








