General
  - add routines for displaying/printing the different datatypes

  - promotion rules: Circles, Lines, Bounds, Triangles, ...
     - have left them for the moment, as don't often do binary
       operations on these, but will need it for transformations (maybe)
       and maybe for constructing arrays of these things, or doing
       intersections, ...

  - Tests
     - add more comprehensive tests, using @assert to check things are correct
     - perhaps put the tests that do plots in separate "examples"
         as these are no suitable for off-line testing?
     - generic tests that "universal" functions such as isin, closed, bounded, ...
       exist for all types

  - Documentation
     - how should we document everything in here
        -- auto, e.g. doxygen
	-- separate docs, e.g. using iJulia

  - Additional shapes/objects to add
     - Splines (Bezier, ...?)
         already some dicussion of B-Splines
	 	 https://groups.google.com/forum/#!topic/julia-dev/lYBoGV_iK1g
		 https://groups.google.com/forum/#!topic/econforge/SW_PbHh_OCE
     - Ellipses (and arcs)
     - Other mathsy shapes/curves?

  - Most of my types have been made "immutable" by presumably don't
    want to do that for polygons
     - maybe not for circles? maybe not for others

  - copy methods?

point.jl
  - currently have Point and Vect as aliases for each other
       strictly a point and a vector are different, and different operators work on each
       but at the moment this just seems to be a mathematical nicety
            e.g., its convenient to be able to do (a+b)/2 to find a mid-point of points a and b
                  thought strictly should only be done with vectors

line.jl
  Haven't really implemented all of "Ray" yet 
  Conversions from Line -> Ray -> Segment (with extra information)???
  Intersections between mixed Line, Ray and Segment
  Arrays of lines, rays and segments???
  Many of the constructors for a "Line" push them towards being Float64
     which will then have an impact on later algorithms
     -- could have specialised algorithms to deal with Rationals (say)
     -- similar issues with circles etc
  intersections for Rays and Segments probably aren't done the most
     efficient way, and this is worth a little more time
 
triangle.jl
  intersections and unions -- by converting into a polygon
     (NB: triangles aren't polygons(type) because don't store 4 points
          cause its a waste, and we will need lots of triangles at
          some points)
  distance and intersection routines
     distance from point to triangle isn't working yet
  generators for 
     equilitaral
     isosoles   
  isin (for circumcircle)
      - slightly different from isin(triangle)
      -  (p1,p2,p3) and (Points) and (t1) versions
  
circle.jl (center, radius)
  arc (part of a circle) needs to be finished out
  edgeintersection routines between arc and line/ray/segment
  intersection and distance between acr/circle and line/ray/segment

transforms.jl
  shear
  ???

polygons.jl
   simple OK
   almost simple, almost OK
   complex not implemented at all
      do we need a "path" made up of line segments?

   do I really want to enforce that polygons have 3 points
      it makes some logic easier (always at least a triangle, so area
         calc is easier)
      but other bits, e.g. return value from convex hulls area harder
 
   constructors for random polygons with given properties

   union/intersection/differences
     -- can I create a new operator 'u' or 'n' or using Unicode
     	-- would that even be wise
 
   there is still a problem with "angles" where sometimes gets the
   exterior angle when not convex
      - perhaps is the problem of getting an angle > pi
          - seems to fit the facts
          - using atan to obtain angles, we can only get [-pi/2,pi/2]
 
   remove_colinear.m (from a path)
          including points that are really (floating point) the same

   generators
       random (convex, simple, almostsimple, ...)      
 
   centroid
      - for simple polygon directly is done
      - for others by triangulation? holes as negatives?
      - can also have a simple such method for other closed shapes,
              e.g., circles

   minkowski sum
   medial axis

   vertices = length (explicit vertices, not implicit vertices of complex polys)
   edges = length (for simple -- not sure what to return for complex)

   isalmostsimple 
       simplify -- turn an "almostsimple" polygon into a simple one
         -- possible triangulated version?

   smooth edges
       -- remove some almost colinear points
       -- even just remove colinear, with tolerance

   not complex (no holes, can be drawn with one continous line)

   implicit_vertices -- implict vertices in complex polygon

   triangulation -- decompose into triangles
      -- and ideally put it back together again as well

   distances from various objects (other than a point)
     -- nearest vertex, nearest point, tangent vertex

   generate sample points on a polygon

   use a polygon as a clipping region for drawing some other object
      - maybe of use in filling?

   monotone test http://en.wikipedia.org/wiki/Monotone_polygon

   edgeintersection jittering needs a little work to deal with
     segment/segment overlaps
       - also need line/segment intersection routine

   also need a proper "intersection" between lines and polygons to
     allow for filling with lines
       - needs to return a list of arrays

   tests
      isregular
      nearvertex
      congruence, similarity
            http://en.wikipedia.org/wiki/Congruence_%28geometry%29

bounds.jl
   could make Bounds a special case of a rectangle???
   add standard functions to bounds???
      maybe doesn't make sense if its an abstract, but 'isin' at least
          would be useful

utilities.jl
   convex hulls
   delauna ytriangulation / Voronoi diagram
   distance functions 
    - calculate distances between two disparate objects, along with closest points

plot.jl
   conditionally include PyPlot?
       allow for alternatives to PyPlot?

   add an plot routine that iterates over an array of objects, giving
   (by default) each a different color

   really need an optional "n" argument for plot and displayPath
      so that the user can make a more or less exact approximation to
      the real curve
         - only matters for circles and arcs at the moment
	 - would be important for Splines, etc.

   draw arrows for unbounded bits?

   fill routine
      using matplotlib to start, but then
        solid color
	shading
	stripes
	cross-hatching
	speckled
	checkerboard

other issues

   -- is there really a point to having separate types for "Point" and
      "Vect"?

   -- make sure to vectorize a lot of the basic functions, e.g., area,
      perimeter, bounded, closed, isin


   -- basic issue of 
         Array{Point} <: Array{GeomObject} is false
              if think this is why doesn't work to find this routine
                sometimes

         but want to have a routine that plots and array of objects

         could be issue for other cases as well


       typealias Vector{T} Array{T,1}
         should be helpful???


